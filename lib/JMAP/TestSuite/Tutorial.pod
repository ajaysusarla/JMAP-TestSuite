=head1 NAME

JMAP::TestSuite Tutorial

=head1 DESCRIPTION

JMAP::TestSuite is a suite of tests to verify that a server implementation
adheres to the JMAP specifications (L<https://jmap.io/>).

This document is aimed at test *writers*. For writing an adapter for your
server implementation, see L<JMAP::TestSuite::ServerAdapter>.

=head1 A BASIC TEST

Let's write a very simple test to verify that we can get a message that
we've created. We'll go over the details after.

=head2 The test

Imagine we have a file, newtest.t:

  use jmaptest;

  test {
    my ($self) = @_;

    my $account = $self->any_account;
    my $tester = $account->tester;

    my $message = $account->create_mailbox->add_message;

    $tester->request_ok(
      [ "Email/get" => { ids => [ $message->id ] } ],
      superhashof({
        list => [ superhashof({ subject => $message->subject }) ],
      }),
      'our subject matches'
    );
  }

If we run this test:

  JMAP_SERVER_ADAPTER_FILE=cyrus.json perl -Ilib newtest.t

We get:

  # tests
      # test from newtest.t
          ok 1 - batch has results for every creation id and nothing more
          ok 2 - created a mailbox
          # Subtest: our subject matches
              ok 1 - JMAP request succeeded
              ok 2 - Found a sentence named Email/get
              ok 3 - Sentence for cid 'a' in response to 'Email/get' matches up
              1..3
          ok 3 - our subject matches
          1..3
      ok 1 - test from newtest.t
      1..1
  ok 1 - tests
  1..1

=head2 The Breakdown

Let's break it down.

  use jmaptest;

This imports the 'test' method and a bunch of other libraries we may
need. As always, you can import more libraries as needed.

  test {
    my ($self) = @_:

    my $account = $self->any_account;

Here our subroutine grabs the L<JMAP::TestSuite::Tester> object and requests
a usable L<JMAP::TestSuite::Account> object for the server adapter being used.
(In our case, a C<JMAP::TestSuite::Account::Cyrus> object (defined in
L<JMAP::TestSuite::ServerAdapter::Cyrus>).

    my $tester = $account->tester;

Here we get a L<JMAP::TestSuite::JMAP::Tester::Wrapper> object which gives
us a number ways to make requests against the JMAP server and examine the
responses. This class is a wrapper around L<JMAP::Tester>, so all of its
methods are also available.

    my $message = $account->create_mailbox->add_message;  

This does two things - creates us a mailbox on the JMAP server (using JMAP)
and adds a message to it (also using JMAP).

C<create_mailbox()> returns a L<JMAP::TestSuite::Entity::Mailbox> object,
C<add_message()> return a L<JMAP::TestSuite::Entity::Email> object.

You can use these objects to examine the underlying data in the JMAP server
and to make changes to the server.

    $tester->request_ok(
      [ "Email/get" => { ids => [ $message->id ] } ],
      superhashof({
        list => [ superhashof({ subject => $message->subject }) ],
      }),
      'our subject matches'
    );
  }

C<request_ok()> is a handy method that allows us to make a JMAP request
and examine the response all in one. The C<_ok()> part of it means that
it will generate Test output for us (and does so inside of a
L<Test::More::subtest()> identified by the C<our subject matches>
description).

The first argument is shorthand for a single JMAP request. The second
argument is the structure we want to compare the response against. The
third argument is the description for the test.

In our case above using shorthand, the second argument will be checked
against the matching JMAP C<methodResponse> section for our JMAP
request's C<methodCall> (here, "Email/get").

(C<superhashof()> comes from L<Test::Deep>.)

=head1 MAKING REQUESTS

There are a number of ways to make requests using C<$tester>:

=head2 request()

  my $res = $tester->request([[
    "Email/get" => { ids => [ $message->id ] },
  ]]);

  jcmp_deeply(
    $res->single_sentence("Email/get")->arguments,
    superhashof({ list => [ superhashof({ subject => $subject }) ] }),
    "our subject was returend"
  );

C<request()> is specified in detail at L<JMAP::Tester::request>. It returns
a response object that you can use to examine the response in detail.

Particularly of use is dumping out the response for debugging:

  diag explain $res->as_stripped_triples;

which will show the decoded JMAP response.

=head2 request_ok() simple usage

  $tester->request_ok($requst, $response, $description);

  $tester->request_ok(
    [ "Email/get" => { ids => [ $message->id ] } ],
    superhashof({
      list => [ superhashof({ subject => $message->subject }) ],
    }),
    'our subject matches'
  );

In this form, C<$request> should be an ARRAYREF containing a single
request. C<$response> should be a structure (or L<Test::Deep> comparator)
to compare the matching sentence in the response against.

In the event that there is no matching sentence in the response for the
request, C<request_ok()> will output test failures with some diagnostics
to help pinpoint what went wrong.

C<$description> will be passed to L<Test::More::subtest()> to wrap all
of the generated tests.

=head2 request_ok() with full paragraphs

  $tester->request_ok($requests, $responses, $description);

  $tester->request_ok(
    [
      [ "Email/get", { ids => [ $message->id ], }, ],   # implicit client-id
      [ "Email/get", { ids => [ "otherid" ], }, "r2" ], # explicit client-id
    ],
    [
      [ superhashof({ ... }), ]      # Implicit name
      [ "Email/get" => ({ ... }), ], # Explicit name
    ],
    "a test!"
  );

In this form, you can make multiple requets at a single time and examine
the responses for them all at once.

=head1 WORKING WITH THE MAIN TESTER OBJECT (C<$self>)

The main test object is the entryway to getting test accounts from the
JMAP server under test. From it, you get:

=over 4

=item any_account

This will return any account the server adapter wants to return. Generally
a reused account that most tests will make changes to.

=item pristine_account

A new, fresh account that only this test will be using / making changes to.
This should only be used for tests that cannot pass if there is existing
data in the way.

In order to use this, you must mark the test as pristine, since not all
server adapters can provide pristine accounts. Marking a test as pristine
looks like this:

  use jmaptest;

  attr pristine => 1;

  test {
    ...
  }

If a server adapter does not support pristine tests, the test will be
skipped.

=item server

This returns the underlying L<JMAP::TestSuite::ServerAdapter> object being
used for this test run.

=back

=head1 WORKING WITH ACCOUNTS

Accounts represent a single account on the JMAP server. From it, you
get a number of convenience methods:

=over 4

=item create_mailbox

  my $mailbox = $account->create_mailbox;

This creates a mailbox on the server for you using JMAP. It takes one
argument, which should be a HASHREF of arguments to pass into the JMAP
"Mailbox/create" call. You may omit the argument if you like and any
required properties will be filled in for you. It returns a
L<JMAP::TestSuite::Entity::Mailbox> object.

=item email_blob

  my $blob = $account->email_blob(generic => $args);

This lets you upload a message to the server (using JMAP) and returns
the blob. This message is not in any mailbox but may be added to one using
C<Email/import> and providing C<< $blob->blobId >> as the C<blobId>.

The HASHREF C<$args> of C<< generic => $args >> may contain anything that
can be passsed to C<< $mailbox->add_message($args) >>.

C<$blob> is a L<JMAP::Tester::Result::Upload> object.

=item get_state

  my $state = $account->get_state('email');

This allows you to retrieve the state string for a particular entity type.
For example:

=item tester

This returns the L<JMAP::TestSuite::JMAP::Tester::Wrapper> object which
you can use to make requests/examine responses.

=back

=head1 WORKING WITH ENTITIES

All L<JMAP::TestSuite::Entity> derived objects get a few convenience methods:

=over 4

=item update

  $mailbox->update({ name => "new name" });

C<update> does a JMAP "foo/set" C<update => { ... }> for the entity in
question and asserts that the update succeeds, and updates the local cache
for the object.

=item destroy

  $mailbox->destroy;

C<destroy> does a JMAP "foo/set" C<destroy => { ... }> for the entity in
question and asserts that the destroy succeeded.

=back

In addition to this, each entity class maps jmap properties to object
methods.

For example, on a C<mailbox> object, you can request C<id>, C<role>, etc...

=head1 WORKING WITH MAILBOXES

A L<JMAP::TestSuite::Entity::Mailbox> object. In addition to the above,
you get:

=over 4

=item add_message

  $mailbox->add_message;

  $mailbox->add_message({
    from => '..',
    to   => '..',
    subject => '...',
    headers => [
      'x-foo' => '...',
    ],
  });

This lets you easily add messages to a mailbox. You can specify a few
convenience headers at the top level as shown above, or provide C<headers>
or even C<raw_headers> for pre-encoded header fields. See the source of
L<JMAP::TestSuite::Account> to see what kinds of things you can provide to
this method (look in the C<%types> variable).

=back

=head1 WORKING WITH MESSAGES

A L<JMAP::TestSuite::Entity::Email> object. In addition to the above,
you get:

=over 4

=item reply

  $message->reply;

  $message->reply({
    headers => [ 'x-foo' => '...' ],
  });

Like C<< $mailbox->add_message >>, but sets up the correct headers for the new
message to be considered as a reply to the previous message.

=back

=head1 AUTHOR

Matthew Horsfall (alh) - <alh@fastmailteam.com>

=cut
